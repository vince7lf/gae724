# -*- coding: utf-8 -*-
"""metric-system-diagram-plot-allinone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xrcdvN7LlDo023wLyRGJRQfHPcInxLu0
"""

# importing the required module 
import matplotlib.pyplot as plt 
  
# x axis values 
x = [1,2,3] 
# corresponding y axis values 
y = [2,4,1] 
  
# plotting the points  
plt.plot(x, y) 
  
# naming the x axis 
plt.xlabel('x - axis') 
# naming the y axis 
plt.ylabel('y - axis') 
  
# giving a title to my graph 
plt.title('My first graph!') 
  
# function to show the plot 
plt.show()



from google.colab import files
import pandas as pd
import matplotlib.pyplot as plt

plt.style.use('ggplot')

df_poi = pd.read_csv('/content/comments.csv')
df = pd.read_csv('/content/free-20200722T211820.log.csv')
df.head()
#df.plot(x='unixepochtime', y=['memused'])

fig, ax = plt.subplots(figsize=(25,5))
ax2 = ax.twiny()

ax.set_xlabel("Periode en seconde")
ax.axhline(y=0, color='k')
ax.axvline(x=0, color='k')

zeroorigints_poi = [ts - df_poi['unixepochtime'][0] for ts in df_poi['unixepochtime']]
for xc,c in zip(zeroorigints_poi, df_poi['comment']):
    ax.axvline(x=xc, label='{}'.format(c), c="k", linestyle=':', alpha=.75, linewidth=2, dashes=(1, 8, 1, 8))

zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
plt1, = ax.plot(zeroorigints, df['totaltotal'], label='Memoire totale Mbytes')
plt2, = ax.plot(zeroorigints, df['totalused'], label='Memoire utilise Mbytes')
plt3, = ax.plot(zeroorigints, df['totalfree'], label='Memoire libre Mbytes')

ax2.set_xlim(ax.get_xlim())
ax2.set_xlabel("")
ax2.set_xticks(zeroorigints_poi)
ax2.tick_params(length=5)
ax2.set_xticklabels(df_poi['comment'], rotation=25, ha='left')

ax.set_ylabel("Utilisation en MBytes")
plt.legend(handles=[plt1, plt2, plt3], loc='upper right')
plt.savefig('memory_usage.png') 
files.download('memory_usage.png') 
plt.show()


#fig, ax = plt.subplots(figsize=(10,5))

#zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
#ax.plot(zeroorigints, df['totaltotal'], label='Memoire totale Mbytes')
#ax.plot(zeroorigints, df['totalused'], label='Memoire utilise Mbytes')
#ax.plot(zeroorigints, df['totalfree'], label='Memoire libre Mbytes')

#ax.axvline(x=0, color='k')
#ax.axhline(y=0, color='k')

#plt.legend(loc='lower right', bbox_to_anchor=(1, 0.1))
#plt.show()

import pandas as pd
import numpy as np

plt.style.use('ggplot')

data = np.loadtxt('/content/free-20200722T211820.log.csv', delimiter=',', skiprows=1)

fig, ax = plt.subplots(figsize=(10,5))

unixepochtime = data[:,0]
totaltotal = data[:,-3]
totalused = data[:,-2]
totalfree = data[:,-1]
zeroorigints = [ts - unixepochtime[0] for ts in unixepochtime]
ax.plot(zeroorigints, totaltotal, label='Memoire totale Mbytes')
ax.plot(zeroorigints, totalused, label='Memoire utilise Mbytes')
ax.plot(zeroorigints, totalfree, label='Memoire libre Mbytes')

plt.xlabel("Periode en seconde")
plt.ylabel("Utilisation en MBytes")
ax.axvline(x=0, color='k')
ax.axhline(y=0, color='k')
plt.legend(loc='lower right', bbox_to_anchor=(1, 0.1))
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

plt.style.use('ggplot')

df = pd.read_csv('/content/tegrastats-20200722T211820.log.48.csv')
df_poi = pd.read_csv('/content/comments.csv')

df.head()

fig, ax = plt.subplots(figsize=(25,5))
ax2 = ax.twiny()

ax.set_xlabel("Periode en seconde")
ax.axhline(y=0, color='k')
ax.axvline(x=0, color='k')

zeroorigints_poi = [ts - df_poi['unixepochtime'][0] for ts in df_poi['unixepochtime']]
for xc,c in zip(zeroorigints_poi, df_poi['comment']):
    ax.axvline(x=xc, label='{}'.format(c), c="k", linestyle=':', alpha=.75, linewidth=2, dashes=(1, 8, 1, 8))

zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
plt1, = ax.plot(zeroorigints, df['plltemp'], label='PLL C')
plt2, = ax.plot(zeroorigints, df['cputemp'], label='CPU C')
#ax.plot(zeroorigints, df['pmictemp'], label='PMIC C')
plt3, = ax.plot(zeroorigints, df['gputemp'], label='GPU C')
plt4, = ax.plot(zeroorigints, df['aotemp'], label='AO C')
plt5, = ax.plot(zeroorigints, df['thermal'], label='Thermal C')

ax2.set_xlim(ax.get_xlim())
ax2.set_xlabel("")
ax2.set_xticks(zeroorigints_poi)
ax2.tick_params(length=5)
ax2.set_xticklabels(df_poi['comment'], rotation=25, ha='left')

ax.set_ylabel("Temperatude en degre celcius (C)")

plt.ylim(bottom=25, top=55)
plt.legend(handles=[plt1, plt2, plt3, plt4, plt5], loc='upper right')
plt.savefig('temperature.png')
files.download('temperature.png')
plt.show()


#fig, ax = plt.subplots(figsize=(10,5))

#zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
#ax.plot(zeroorigints, df['plltemp'], label='PLL C')
#ax.plot(zeroorigints, df['cputemp'], label='CPU C')
##ax.plot(zeroorigints, df['pmictemp'], label='PMIC C')
#ax.plot(zeroorigints, df['gputemp'], label='GPU C')
#ax.plot(zeroorigints, df['aotemp'], label='AO C')
#ax.plot(zeroorigints, df['thermal'], label='Thermal C')

#plt.xlabel("Periode en seconde")
#plt.ylabel("Temperatude en degre Celcius")
#plt.ylim(bottom=25, top=55)
#ax.axhline(y=0, color='k')
#ax.axvline(x=0, color='k')
#plt.legend(loc='lower right', bbox_to_anchor=(1, 0.1))
#plt.show()

fig, ax = plt.subplots(figsize=(25,5))
ax2 = ax.twiny()

ax.set_xlabel("Periode en seconde")
ax.axhline(y=0, color='k')
ax.axvline(x=0, color='k')

zeroorigints_poi = [ts - df_poi['unixepochtime'][0] for ts in df_poi['unixepochtime']]
for xc,c in zip(zeroorigints_poi, df_poi['comment']):
    ax.axvline(x=xc, label='{}'.format(c), c="k", linestyle=':', alpha=.75, linewidth=2, dashes=(1, 8, 1, 8))

zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
plt1, = ax.plot(zeroorigints, df['cpu1per'], label='CPU 1 %')
plt2, = ax.plot(zeroorigints, df['cpu2per'], label='CPU 2 %')
plt3, = ax.plot(zeroorigints, df['cpu3per'], label='CPU 3 %')
plt4, = ax.plot(zeroorigints, df['cpu4per'], label='CPU 4 %')
plt5, = ax.plot(zeroorigints, df['gr3dper'], label='GR3D %')
plt6, = ax.plot(zeroorigints, df['emcper'], label='EMC %')

ax2.set_xlim(ax.get_xlim())
ax2.set_xlabel("")
ax2.set_xticks(zeroorigints_poi)
ax2.tick_params(length=5)
ax2.set_xticklabels(df_poi['comment'], rotation=25, ha='left')

ax.set_ylabel("Frequence en %")
plt.legend(handles=[plt1, plt2, plt3, plt4, plt5, plt6], loc='upper right')
plt.savefig('frequency_usage.png')
files.download('frequency_usage.png')
plt.show()



#fig, ax = plt.subplots(figsize=(10,5))

#zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
#ax.plot(zeroorigints, df['cpu1per'], label='CPU 1 %')
#ax.plot(zeroorigints, df['cpu2per'], label='CPU 2 %')
#ax.plot(zeroorigints, df['cpu3per'], label='CPU 3 %')
#ax.plot(zeroorigints, df['cpu4per'], label='CPU 4 %')
#ax.plot(zeroorigints, df['gr3dper'], label='GR3D %')
#ax.plot(zeroorigints, df['emcper'], label='EMC %')

#plt.xlabel("Periode en seconde")
#plt.ylabel("Frequence en %")
#plt.ylim(top=100)
#ax.axhline(y=0, color='k')
#ax.axvline(x=0, color='k')
#plt.legend(loc='lower right', bbox_to_anchor=(1, 0.1))
#plt.show()

fig, ax = plt.subplots(figsize=(25,5))
ax2 = ax.twiny()

ax.set_xlabel("Periode en seconde")
ax.axhline(y=0, color='k')
ax.axvline(x=0, color='k')

zeroorigints_poi = [ts - df_poi['unixepochtime'][0] for ts in df_poi['unixepochtime']]
for xc,c in zip(zeroorigints_poi, df_poi['comment']):
    ax.axvline(x=xc, label='{}'.format(c), c="k", linestyle=':', alpha=.75, linewidth=2, dashes=(1, 8, 1, 8))

zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
plt1, = ax.plot(zeroorigints, df['pom5vincurr'], label='5V IN')
ax.plot(zeroorigints, df['pom5vinavg'], label='5V IN moy.')
plt2, = ax.plot(zeroorigints, df['pom5vgpucurr'], label='5V GPU')
ax.plot(zeroorigints, df['pom5vgpuavg'], label='5V GPU moy.')
plt3, = ax.plot(zeroorigints, df['pom5vcpucurr'], label='5V CPU')
ax.plot(zeroorigints, df['pom5vcpuavg'], label='5V CPU moy.')

ax2.set_xlim(ax.get_xlim())
ax2.set_xlabel("")
ax2.set_xticks(zeroorigints_poi)
ax2.tick_params(length=5)
ax2.set_xticklabels(df_poi['comment'], rotation=25, ha='left')

#plt.xlabel("Periode en seconde")
ax.set_ylabel("Consommation en millivolt")
plt.legend(handles=[plt1, plt2, plt3], loc='upper right')
plt.savefig('consommation.png')
files.download('consommation.png')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

plt.style.use('ggplot')

df = pd.read_csv('/content/iotop-20200722T211820.log.totaldisk.csv')
df.head()

fig, ax = plt.subplots(figsize=(25,5))
ax2 = ax.twiny()

ax.set_xlabel("Periode en seconde")
ax.axhline(y=0, color='k')
ax.axvline(x=0, color='k')

zeroorigints_poi = [ts - df_poi['unixepochtime'][0] for ts in df_poi['unixepochtime']]
for xc,c in zip(zeroorigints_poi, df_poi['comment']):
    ax.axvline(x=xc, label='{}'.format(c), c="k", linestyle=':', alpha=.75, linewidth=2, dashes=(1, 8, 1, 8))

zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
plt1, = ax.plot(zeroorigints, df['totaldiskread'], label='Total disk read Kbytes')
plt2, = ax.plot(zeroorigints, df['totaldiskwrwite'], label='Total disk write Kbytes')

ax2.set_xlim(ax.get_xlim())
ax2.set_xlabel("")
ax2.set_xticks(zeroorigints_poi)
ax2.tick_params(length=5)
ax2.set_xticklabels(df_poi['comment'], rotation=25, ha='left')

#plt.xlabel("Periode en seconde")
ax.set_ylabel("Bande passante entre les processus et les 'kernel threads' en kilobytes")
plt.legend(handles=[plt1, plt2], loc='upper right')
plt.savefig('io_totaldisk.png')
files.download('io_totaldisk.png')
plt.show()


#fig, ax = plt.subplots(figsize=(10,5))

#zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
#ax.plot(zeroorigints, df['totaldiskread'], label='Total disk read Kbytes')
#ax.plot(zeroorigints, df['totaldiskwrwite'], label='Total disk write Kbytes')

#plt.xlabel("Periode en seconde")
#plt.ylabel("bandwidth between processes and kernel threads in kilobytes")
##plt.ylim(top=100)
##ax.axhline(y=0, color='k')
##ax.axvline(x=0, color='k')
#plt.legend(loc='lower right', bbox_to_anchor=(1, 0.1))
#plt.savefig('io_totaldisk.png')
#plt.show()

import pandas as pd
import matplotlib.pyplot as plt

plt.style.use('ggplot')

df = pd.read_csv('/content/iotop-20200722T211820.log.segnet-camera.csv')
df.head()

fig, ax = plt.subplots(figsize=(25,5))
ax2 = ax.twiny()

ax.set_xlabel("Periode en seconde")
ax.axhline(y=0, color='k')
ax.axvline(x=0, color='k')

zeroorigints_poi = [ts - df_poi['unixepochtime'][0] for ts in df_poi['unixepochtime']]
for xc,c in zip(zeroorigints_poi, df_poi['comment']):
    ax.axvline(x=xc, label='{}'.format(c), c="k", linestyle=':', alpha=.75, linewidth=2, dashes=(1, 8, 1, 8))

zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
plt1, = ax.plot(zeroorigints, df['diskread'], label='Disk read Kbytes')
plt2, = ax.plot(zeroorigints, df['diskwrite'], label='Disk write Kbytes')

ax2.set_xlim(ax.get_xlim())
ax2.set_xlabel("")
ax2.set_xticks(zeroorigints_poi)
ax2.tick_params(length=5)
ax2.set_xticklabels(df_poi['comment'], rotation=25, ha='left')

#plt.xlabel("Periode en seconde")
ax.set_ylabel("Bande passante entre les processus et les 'kernel threads' en kilobytes")
plt.legend(handles=[plt1, plt2], loc='upper right')
plt.savefig('io_segnetcamera.png')
files.download('io_segnetcamera.png')
plt.show()


#fig, ax = plt.subplots(figsize=(10,5))

#zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
#ax.plot(zeroorigints, df['diskread'], label='Total disk read Kbytes')
#ax.plot(zeroorigints, df['diskwrite'], label='Total disk write Kbytes')

#plt.xlabel("Periode en seconde")
#plt.ylabel("bandwidth between processes and kernel threads in kilobytes")
##plt.ylim(top=100)
##ax.axhline(y=0, color='k')
##ax.axvline(x=0, color='k')
#plt.legend(loc='lower right', bbox_to_anchor=(1, 0.1))
#plt.savefig('io_segnetcamera.png')
#plt.show()

fig, ax = plt.subplots(figsize=(25,5))
ax2 = ax.twiny()

ax.set_xlabel("Periode en seconde")
ax.axhline(y=0, color='k')
ax.axvline(x=0, color='k')

zeroorigints_poi = [ts - df_poi['unixepochtime'][0] for ts in df_poi['unixepochtime']]
for xc,c in zip(zeroorigints_poi, df_poi['comment']):
    ax.axvline(x=xc, label='{}'.format(c), c="k", linestyle=':', alpha=.75, linewidth=2, dashes=(1, 8, 1, 8))

zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
ax.plot(zeroorigints, df['io'], label='Total disk read Kbytes')

ax2.set_xlim(ax.get_xlim())
ax2.set_xlabel("")
ax2.set_xticks(zeroorigints_poi)
ax2.tick_params(length=5)
ax2.set_xticklabels(df_poi['comment'], rotation=25, ha='left')

#plt.xlabel("Periode en seconde")
ax.set_ylabel("IO (%)")
plt.legend(handles=[plt1], loc='upper right')
plt.savefig('io.png')
files.download('io.png')
plt.show()


#fig, ax = plt.subplots(figsize=(10,5))

#zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
#ax.plot(zeroorigints, df['io'], label='Total disk read Kbytes')

#plt.xlabel("Periode en seconde")
#plt.ylabel("bandwidth between processes and kernel threads in kilobytes")
##plt.ylim(top=100)
##ax.axhline(y=0, color='k')
##ax.axvline(x=0, color='k')
#plt.legend(loc='lower right', bbox_to_anchor=(1, 0.1))
#plt.savefig('io.png')
#plt.show()

import matplotlib.pyplot as plt

# x coordinates for the lines
xcoords = [0.1, 0.3, 0.5]
# colors for the lines
colors = ['r','k','b']

for xc,c in zip(xcoords,colors):
    plt.axvline(x=xc, label='line at x = {}'.format(xc), c=c)

plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

plt.style.use('ggplot')

df = pd.read_csv('/content/comments.csv')
df.head()

fig, ax = plt.subplots(figsize=(10,5))

zeroorigints = [ts - df['unixepochtime'][0] for ts in df['unixepochtime']]
#ax.plot(zeroorigints, df['comment'], label='point of interests')
for xc,c in zip(zeroorigints, df['comment']):
    plt.axvline(x=xc, label='{}'.format(c), c=np.random.rand(3,))

plt.legend(loc='lower right', bbox_to_anchor=(1, 0.1))
plt.show()